import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import ResponsiveAppBar from '../styles/appbar';
import { useRouter } from 'next/router';
import { Container, Typography, Card, CardContent, Button, TextField, Box } from '@mui/material';

let mockSponsors = [
  { id: 1, name: 'ABC Corporation' },
  { id: 2, name: 'XYZ Ltd' },
];

let mockDrivers = [
  { id: 1, name: 'John Doe' },
  { id: 2, name: 'Jane Smith' },
];

let mockAdmins = [
  { id: 1, name: 'Admin1' },
  { id: 2, name: 'Admin2' },
];

function Admin() {
  const [newSponsorName, setNewSponsorName] = useState('');
  const [newDriverName, setNewDriverName] = useState('');
  const [newAdminName, setNewAdminName] = useState('');
  const [userRole, setUserRole] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const router = useRouter();

  useEffect(() => {
    const fetchData = async () => {
      try {
        console.log('Hello World!');
        const user = await Auth.currentAuthenticatedUser(); // Retrieve the authenticated user from Cognito
        const userEmail = user.attributes.email; // Extract the user's email
        console.log('User email:', userEmail);
        // const response = await fetch('/api/user/get-user-type');
        const response = await fetch(`/api/user/get-user-type?userEmail=${encodeURIComponent(userEmail)}`);

        if (!response.ok) {
          throw new Error('Failed to fetch data');
        }

        const data = await response.json();
        const role = data[0].user_Type;

        setUserRole(role);
        setIsLoading(false);
      } catch (error) {
        setError(error.message);
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    if (!isLoading && !error) {
      if (userRole === 'ADMIN') {
        router.push('/admin');
      } else {
        router.push('/login');
      }
    }
  }, [isLoading, error, userRole]);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  const getUserEmailFromCognito = async () => {
    // Implement the logic to retrieve the user's email from Cognito here
    // You can use the AWS SDK for JavaScript to interact with Cognito
    // Refer to the previous message for an example of how to retrieve user attributes
    return 'user@example.com'; // Replace this with the actual logic to fetch the user's email
  };

  const handleAddSponsor = async (sponsorName) => {
    try {
      // Make API call to add sponsor
      const response = await fetch('/api/admin/add_org', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ org_Name: sponsorName }), // Pass the sponsor name to the API
      });
  
      if (!response.ok) {
        throw new Error('Failed to add sponsor');
      }
  
      // Update UI to reflect the addition of sponsor
      // For example, you can update the mockSponsors array with the newly added sponsor
      const newSponsor = { id: Date.now(), name: sponsorName }; // Assuming the ID is generated by the server, using Date.now() as a placeholder
      mockSponsors = [...mockSponsors, newSponsor];
  
      console.log('Sponsor added successfully');
    } catch (error) {
      console.error('Error adding sponsor:', error);
    }
  };

  const handleRemoveSponsor = async (sponsorId) => {
    try {
      // Make API call to remove sponsor
      const response = await fetch('/api/admin/delete_org', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ org_ID: sponsorId }),
      });
  
      if (!response.ok) {
        throw new Error('Failed to remove sponsor');
      }
  
      // Update UI to reflect the removal of sponsor
      // For example, you can filter out the removed sponsor from the mockSponsors array
      const updatedSponsors = mockSponsors.filter((sponsor) => sponsor.id !== sponsorId);
      mockSponsors = updatedSponsors;
  
      console.log('Sponsor removed successfully');
    } catch (error) {
      console.error('Error removing sponsor:', error);
    }
  };  

  return (
    <React.Fragment>
      <Head>
        <title>Admin</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ResponsiveAppBar />
      <Container>
        <Typography variant="h3" gutterBottom>
          Admin Dashboard
        </Typography>
        <Typography variant="h4" gutterBottom>
          Manage Sponsors
        </Typography>
        {mockSponsors.map((sponsor) => (
          <Card key={sponsor.id} style={{ marginBottom: '16px' }}>
            <CardContent>
              <Typography variant="h6">{sponsor.name}</Typography>
              <Button
                variant="contained"
                color="secondary"
                onClick={() => handleRemoveSponsor(sponsor.id)}
                style={{ marginTop: '8px' }}
              >
                Remove
              </Button>
            </CardContent>
          </Card>
        ))}
        <TextField
          label="New Sponsor Name"
          variant="outlined"
          fullWidth
          margin="normal"
          value={newSponsorName}
          onChange={(e) => setNewSponsorName(e.target.value)}
        />
        <Button variant="contained" color="primary">
          Add Sponsor
        </Button>

        {/* Adding spacing between sections */}
        <Box mt={3} />

        <Typography variant="h4" gutterBottom>
          Manage Drivers
        </Typography>
        {mockDrivers.map((driver) => (
          <Card key={driver.id} style={{ marginBottom: '16px' }}>
            <CardContent>
              <Typography variant="h6">{driver.name}</Typography>
              <Button
                variant="contained"
                color="secondary"
                onClick={() => handleRemoveDriver(driver.id)}
                style={{ marginTop: '8px' }}
              >
                Remove
              </Button>
            </CardContent>
          </Card>
        ))}
        <TextField
          label="New Driver Name"
          variant="outlined"
          fullWidth
          margin="normal"
          value={newDriverName}
          onChange={(e) => setNewDriverName(e.target.value)}
        />
        <Button variant="contained" color="primary">
          Add Driver
        </Button>

        {/* Adding spacing between sections */}
        <Box mt={3} />

        <Typography variant="h4" gutterBottom>
          Manage Admins
        </Typography>
        {mockAdmins.map((admin) => (
          <Card key={admin.id} style={{ marginBottom: '16px' }}>
            <CardContent>
              <Typography variant="h6">{admin.name}</Typography>
              <Button
                variant="contained"
                color="secondary"
                onClick={() => handleRemoveAdmin(admin.id)}
                style={{ marginTop: '8px' }}
              >
                Remove
              </Button>
            </CardContent>
          </Card>
        ))}
        <TextField
          label="New Admin Name"
          variant="outlined"
          fullWidth
          margin="normal"
          value={newAdminName}
          onChange={(e) => setNewAdminName(e.target.value)}
        />
        <Button variant="contained" color="primary">
          Add Admin
        </Button>

        {/* Adding spacing between sections */}
        <Box mt={3} />

        <Typography variant="h4" gutterBottom>
          Manage Sponsor Companies
        </Typography>
        {mockSponsors.map((sponsor) => (
          <Card key={sponsor.id} style={{ marginBottom: '16px' }}>
            <CardContent>
              <Typography variant="h6">{sponsor.name}</Typography>
              <Button
                variant="contained"
                color="secondary"
                onClick={() => setSponsorToRemove(sponsor.id)} // Set the sponsor to remove
                style={{ marginTop: '8px' }}
              >
                Remove
              </Button>
            </CardContent>
          </Card>
        ))}
        <TextField
          label="New Sponsor Company"
          variant="outlined"
          fullWidth
          margin="normal"
          value={newSponsorName}
          onChange={(e) => setNewSponsorName(e.target.value)}
        />
        <Button
          variant="contained"
          color="primary"
          onClick={() => handleAddSponsor(newSponsorName)} // Call handleAddSponsor with the newSponsorName as parameter
        >
          Add Sponsor Company
        </Button>

    </Container>
    </React.Fragment>
  );
}

export default Admin;